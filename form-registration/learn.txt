React JS : Javascript Library
--------------------------
1) Component:
Two types: i) functional II) classbase
-> Components are independent & reusable.
-> Components are js files.
-> This is returns Html to render function.

2) Jsx : Js + HTML
-> Extensions to Javascript language syntax.
-> JSX = Javascript and XML

3) Props
-> use: if you create dynamic ui base component.
-> In some cases, Components need to communicate ( send data to each other ) and the way to pass data between Components is using by props. 

4) State
-> state is built-in object.
-> state object is used to store all data to particular component only.
-> Use state inside class component : this.state  
-> Use state inside function component : useState ( hooks ) 

5) State in functional component
-> using useState hooks threw can use state.
        ----------
-> import useState.
-> ex: const [username, setName] = useState("Guest");
              --------  ---------
              create    create 
              state     state
              name      function

       Onclick = { () => { setName("Users"); } }

6) Stateful & Stateless Component
-> Component render only UI its called Stateless component.
-> Component carry on State its called Statefull component.

7) Component Lifecycle Method
==> https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
* Mounting Component
-> These methods are called following order : component is created and inserted
    - constructor() 
    - static  getDrivedStateFromprops()
    - render()  
    - componentDidMount()

* Updating Component
-> Any changes on Props & State then Components are re-render.
    - state getDrivedStateFromProps
    - shouldComponentUpdate()
    - render()
    - getSnapshotBeforeUpdate()
    - componentDidUpdate()

* Unmounting Component
-> This method called when component are removed.
    - componentWillUnmount()
---------------------------------------------------------------------
* React Route
https://reactrouter.com/
- npm install react-router-dom@6
-> This package use to web app to routing.

==> If you use 6 version of route.
- replace to switch in to routes
                          ------
- import : import { BrowserRouter as Router, Route, Routes } from 'react-router-dom'
- ex: <Route exact path="/" element={<><Home/></>}></Route>
- 404: <Route exact path="*" element={<><Home/></>}></Route>

* firebase + uuid
-> install : npm install --save firebase uuid

---------------------------------------------------------------------
* style Component
https://styled-components.com/
-> Library use to style component to use muti times with same style.

* Redux
-> This Library use to state management.

* Axios
https://www.npmjs.com/package/axios
-> Install this Library : npm install axios
                          -----------------               
-> Use to handle http request to our app external url.

----- Axios Default Global Configuration ------
-> Must be use this Configuration in index.js
-> axios.defaults.baseURL = "https://....";
-> axios.defaults.headers.common["AUTHORIZATION"] = "AUTH_TOKEN";

OR : If you use deffrent Configuration in some Components. 
--
-> use instance of axios.

---------------------------------------------------------------------

* Add css for particular component ( this css not apply on full page )
-> to use module.css

---------------------------------------------------------------------
* Binding with Event handling.
-> 4 way to event Binding.
ex: 
export class PersonEvent extends Component{
  constructor(props){
    super(props);
    this.state = {};

    // constructor binding
    this.buttonClickhandler = this.buttonClickhandler.bind(this);
  }
  
  // simple function to event this keyword rebind. 
  buttonClickhandler(){
    console.log(this);
  }
  //arrow function not rebind this keyword
  buttonClickhandler = () => {
   console.log(this.state);
  }
  render(){
    return(
      <div>
        <h2>Event with component</h2>
        <button type="button" onClick={this.buttonClickhandler}>Click</button> 
        {/* binding method */}
        <button type="button" onClick={() => this.buttonClickhandler()}>Click</button>
        {/* Inline Binding */}
        <button type="button" onClick={this.buttonClickhandler}>Click</button>
      </div>
    )
  }
}
---------------------------------------------------------------------